From: <Saved by Blink>
Snapshot-Content-Location: https://250bpm.com/blog:86/
Subject: 250bpm
Date: Fri, 26 Jul 2024 14:49:19 +0800
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--QeLhWQ6tfc4ZaZAtAV585sgRYVyrSPkRh3cjjPEADF----"


------MultipartBoundary--QeLhWQ6tfc4ZaZAtAV585sgRYVyrSPkRh3cjjPEADF----
Content-Type: text/html
Content-ID: <frame-305F4B1E21F8D393DA521B28B516D912@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://250bpm.com/blog:86/

<!DOCTYPE html><html><head><meta http-equiv=3D"Content-Type" content=3D"tex=
t/html; charset=3DUTF-8">
 =20
  <title>250bpm</title>
  <link rel=3D"stylesheet" type=3D"text/css" href=3D"https://250bpm.com/mai=
n.css">
</head>
<body>
  <p><a class=3D"home" href=3D"https://250bpm.com/index.html">=E2=86=90</a>=
</p>
<h1 id=3D"thecostofabstraction">The Cost of Abstraction</h1>
<p>The cost of duplicating code, of accumulating technical debt, of not hav=
ing tests and so on is often discussed and written about. The cost of abstr=
acting things is almost never mentioned though, despite it being a major fa=
ctor in keeping any project maintainable.</p>
<p>As an example, imagine that your program often increases two variables i=
n sequence:</p>
<pre><code>i++;
j++;
</code></pre>
<p>So you decide that the functionality deserves a dedicated function:</p>
<pre><code>template&lt;typename T&gt; inc_pair(T &amp;i, T &amp;j) {
    i++;
    j++;
}
</code></pre>
<p>By doing so you've removed some duplicated code but also =E2=80=94 and t=
hat's a thing that's rarely mentioned =E2=80=94 you've added a new abstract=
ion called "inc_pair".</p>
<p>In this particular case, almost everybody will agree that adding the abs=
traction was not worth it. But why? It was a tradeoff between code duplicat=
ion and increased level of abstraction. But why would one decide that the w=
ell known cost of code duplication is lower than somewhat fuzzy "cost of ab=
straction"?</p>
<p>To answer that question we have to look at what "cost of abstraction" re=
ally means.</p>
<p>One obvious cost is that an abstraction is adding to the cognitive load =
of whoever works with the code: They will have to keep one more fact in min=
d, namely, that inc_pair is a function that increases both of its arguments=
 by one.</p>
<p>However, the main cost of abstraction is in separating the implementatio=
n from the specification, or, to put it in a different way, the letter of t=
he function from the spirit of the function. The former being what the func=
tion does, the latter being what everybody believes it should do.</p>
<p>The important word in the above sentence is "everybody". Once you make a=
n abstraction, it's not longer about what YOU believe it should do. You are=
 entering the domain of social consensus. It's about what EVERYBODY involve=
d thinks it does. And, as everybody knows, social consensus is hard.</p>
<p>Let's look at a practical example: What if type T for our inc_pair funct=
ion is "Duration"? What will the function do? Will it increase the duration=
 by one second? One day? One nanosecond? Individual users may disagree.</p>
<p>Another example: What if operator ++ on type T throws an exception while=
 doing j++ ? Sould the function leave i and j in inconsistent state? Or sho=
uld it try to keep the change atomic by doing i=E2=80=94 ? And what if i=E2=
=80=94 throws an exception while doing that? Maybe the function is supposed=
 to copy the old values of the variables and set them back in case of an er=
ror? Nobody really knows.</p>
<p>In short, the decision about creating an abstraction should not be taken=
 lightly. There's a large social cost to every abstraction and if you are c=
hurning them out without even thinking about it you are on the way towards =
making the project unmaintainable. If the abstractions leak to the user you=
 are also making it unusable.</p>
<p>That being said, most of the projects out there are already so abstracti=
on heavy that they are almost unmaintainable. Thus, the programmers are acc=
ustomed to the state of unmaintainability, consider it the normal state of =
affairs and they happily contribute to the mess by adding more and more abs=
traction.</p>
<p>I've already shown one example of adding a new abstraction for no partic=
ularly good reason: Programmer notices that two pieces of code are somewhat=
 similar and creates a function to de-duplicate it. The cost of doing so is=
 rarely taken into account.</p>
<p>Another example, a systemic one rather than an accidental one, is the us=
e of mocking in tests. While tests are definitely useful, they often requir=
e certain piece of code to be abstracted so that it can be mocked =E2=80=94=
 for example by creating an interface, then having both actual and mock imp=
lementation of the interface. Creation of an additional abstraction is just=
 an collateral damage.</p>
<p>Yet another example are inheritance hierarchies. Say we want 4 classes: =
Egg laying fish, live bearing fish, egg laying mammals (echidna) and live-b=
earing mammals. The intuitive reaction is to create an inheritance hierarch=
y topped by class Animal, with intermediary nodes Fish and Mammal. It is of=
ten done that way even if there's no use case for directly working with Ani=
mal, Fish or Mammal class. Thus, future maintainers are left to scratch the=
ir heads about how should those abstract classes behave.</p>
<p>In the end I would like to look at what anti-abstraction tools we have a=
t our disposal.</p>
<p>First of all, we have scoping. If a C function is declared as "static" i=
t is visible only within that file. That limits the amount of damage it can=
 cause. It is still an abstraction but it is prevented from leaking to the =
wider audience. Same can be said of Java's "private" modifier. Of course, i=
t's not a panacea. If source file is 10,000 lines long the scope of a stati=
c function is greatly extended and it becomes almost as dangerous as a non-=
static function.</p>
<p>We also have unnamed objects (e.g. lambdas). It turns out it's hard to t=
reat something with no name as an abstraction. (I wonder what Plato would s=
ay about that!) If the only way to refer to a function is by writing it dow=
n the letter and the spirit of the function become much more entangled.</p>
<p>It also seems that Go's implicit interfaces were designed to avoid unnec=
essary abstraction. Given that interfaces are not defined when object is im=
plemented but rather they can be created on the fly as needed by the user, =
their scope can be significantly limited thus keeping the number of people =
affected by the abstraction lower.</p>
<p>My final question is whether we are doing enough to limit the amount of =
abstraction we have to deal with. And do we have sufficient tools to do suc=
h limiting? While in many cases it seems that it's only a question of progr=
ammer's attitude, at least in the case of mocking it's the tooling itself t=
hat contributes to the problem.</p>
<p><strong>Nov 7th, 2016</strong></p>
</body></html>
------MultipartBoundary--QeLhWQ6tfc4ZaZAtAV585sgRYVyrSPkRh3cjjPEADF----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://250bpm.com/main.css

@charset "utf-8";

body { max-width: 50em; padding: 2em 5em; font-family: warnock-pro, Palatin=
o, "Palatino Linotype", "Palatino LT STD", "Book Antiqua", Georgia, serif; =
}

h1 { font-size: 200%; }

h2 { font-size: 180%; }

h3 { font-size: 160%; }

h4 { font-size: 140%; }

h5 { font-size: 120%; }

h6 { font-size: 100%; }

.home { color: black; font-size: 300%; font-weight: bold; text-decoration: =
none; }

a { color: rgb(96, 96, 96); }

tt { font-size: 120%; }

pre { padding: 20px; border: 1px dotted; font-size: 120%; }

th, td { padding-bottom: 0.3em; padding-right: 2em; }

.logo { width: 60%; box-shadow: none; }

.rss { display: inline; width: inherit; }

img { display: block; margin-left: auto; margin-right: auto; width: 75%; bo=
x-shadow: rgba(0, 0, 0, 0.2) 0px 4px 8px 0px, rgba(0, 0, 0, 0.19) 0px 6px 2=
0px 0px; }

img.large { display: block; margin-left: auto; margin-right: auto; width: 9=
8%; box-shadow: rgba(0, 0, 0, 0.2) 0px 4px 8px 0px, rgba(0, 0, 0, 0.19) 0px=
 6px 20px 0px; }

img.small { display: block; margin-left: auto; margin-right: auto; width: 5=
0%; box-shadow: rgba(0, 0, 0, 0.2) 0px 4px 8px 0px, rgba(0, 0, 0, 0.19) 0px=
 6px 20px 0px; }

img.noshadow { display: block; margin-left: auto; margin-right: auto; width=
: 75%; box-shadow: none; }

img.large-noshadow { display: block; margin-left: auto; margin-right: auto;=
 width: 98%; box-shadow: none; }

img.small-noshadow { display: block; margin-left: auto; margin-right: auto;=
 width: 50%; box-shadow: none; }

img.old { display: block; margin-left: auto; margin-right: auto; width: aut=
o; box-shadow: none; }

p.imgtext { text-align: center; font-style: italic; }

table { border-collapse: collapse; width: 100%; }

th, td { padding: 8px; text-align: left; border-bottom: 1px solid rgb(221, =
221, 221); }
------MultipartBoundary--QeLhWQ6tfc4ZaZAtAV585sgRYVyrSPkRh3cjjPEADF------
